// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE                                                                                    \
    flavor = "tap-preferred";                                                                      \
    tapping-term-ms = <220>;                                                                       \
    quick-tap-ms = <220>;                                                                          \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&msk_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&msk_end>, <&kp>; MT_CORE)

/* Nav cluster */

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

MASK_MODS(msk_home, (MOD_LCTL), &kp HOME)
MASK_MODS(msk_end,  (MOD_LCTL), &kp END)

// Alt+Tab swapper, requires PR #1366
ZMK_TRI_STATE(swapper,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <LT2>;
)

// Command+Tab swapper, requires PR #1366
ZMK_TRI_STATE(mswapper,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <LT2>;
)
