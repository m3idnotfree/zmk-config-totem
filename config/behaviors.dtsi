&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

  
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "


&num_word {
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

&caps_word { /delete-property/ ignore-modifiers; };

// long-tap action on hold, short-tap action on all interrupts
#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;


&mt { MT_CORE };

/ { 
    behaviors {
        /omit-if-no-ref/ swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <LT2>;
        };

        /omit-if-no-ref/ smt_ms: smart_mouse {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;

            ignored-key-positions = <LT1 LT3 RT0 RT1 RT2 RT3 RT4 RM1 RM2 RM3 RB1 RB2 RB3 RH0 RH1>;
            ignored-layers = <MOUSE>;
        };

        /omit-if-no-ref/ smt_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&mo>, <&num_dnc>;
        };

        /omit-if-no-ref/ num_dnc: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&sl NUM>, <&num_word>;
        };

        // /omit-if-no-ref/ hml: hml {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&kp>;
        //
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;
        // };
        //
        // /omit-if-no-ref/ hmr: hmr {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&kp>;
        //
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };
        //
        // /omit-if-no-ref/ hml_rpt: hmr_repeat {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&key_repeat>;
        //
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;
        // };
        //
        // /omit-if-no-ref/ hmrlprlt: hmr_lpar_lt {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&lpar_lt>;
        //
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };
        //
        // /omit-if-no-ref/ hmrrprgt: hmr_rpar_gt {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <280>;
        //     quick-tap-ms = <QUICK_TAP_MS>;
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&rpar_gt>;
        //
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;
        // };

        /omit-if-no-ref/ mt_home: mt_home {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mskdhm>, <&kp>;
         
            MT_CORE
        };

        /omit-if-no-ref/ mt_end: mt_end {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mskded>, <&kp>;

            MT_CORE
        };

        /omit-if-no-ref/ mskdhm: masked_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;

            mods = <(MOD_LCTL)>;
        };

        /omit-if-no-ref/ mskded: masked_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;

            mods = <(MOD_LCTL)>;
        };

        // tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
        /omit-if-no-ref/ smt_shft: smart_shft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        // tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
        /omit-if-no-ref/ comma_m: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&cm_inr_m>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /omit-if-no-ref/ cm_inr_m: comma_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp LESS_THAN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // tap: dot | shift + tap: colon | ctrl + shift + tap: >
        /omit-if-no-ref/ dot_m: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&dt_inr_m>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /omit-if-no-ref/ dt_inr_m: dot_inner_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp GREATER_THAN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        // tap: qmark | shift + tap: excl
        /omit-if-no-ref/ qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: left/right parenthesis | shft + tap: less-than/greater-than
        /omit-if-no-ref/ lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /omit-if-no-ref/ rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
        /omit-if-no-ref/ lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings = <&mo>, <&spc_m>;
        };

        /omit-if-no-ref/ spc_m: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPC>, <&dot_spc>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
        /omit-if-no-ref/ bs_del: bs_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <MOD_RSFT>;
        };
  };
};
